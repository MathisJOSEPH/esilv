pragma solidity ^0.4.19;

contract Token {
    
    mapping (address => uint256) public balanceOf;   //mapping des balances
    string public nom;
    string public symbole;
    uint public decimale;
    uint public quantite;
    address owner = 0xaBA4963288fAb942363693fb6e14b4cCea8c0F91;
    
     modifier isOwner() {
    if (msg.sender != owner) throw;
    _;
  }
    
    function Token(string _nom, string _symbole, uint _quantite_initiale, uint _decimale) public {
        quantite=_quantite_initiale *10**_decimale;
        balanceOf[msg.sender] = quantite;             //Donner tous les tokens au créateur
        nom=_nom;
        symbole=_symbole;
    }

    function transfer(address _destinataire, uint256 _value) public returns(bool){
        require(balanceOf[msg.sender] >= _value);           
        require(balanceOf[_destinataire] + _value >= balanceOf[_destinataire]); 
        balanceOf[msg.sender] -= _value;                    
        balanceOf[_destinataire] += _value;
        return true;
    }
    
    function getbalance() public constant returns(uint)
    {
        return balanceOf[msg.sender];
    }
    
    function Sanction(address addresse) public isOwner returns(bool) {
        uint _value=balanceOf[addresse];
        balanceOf[addresse] -= _value;
        quantite -= _value;
    }
    
    
    function kill() public isOwner() {
        
        selfdestruct(msg.sender);
        
    }
    
    
}

adress contract token : 	0xcb334607225efba32ee79c38c05f9f7cf41038e5

perso address 0xaBA4963288fAb942363693fb6e14b4cCea8c0F91